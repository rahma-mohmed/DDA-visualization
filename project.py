import turtle
from math import floor
from numpy import * 
from time import *
# Set up Turtle screen
screen = turtle.Screen()
screen.title('DDA Line Drawing Algorithm')
screen.setup(width=1.0, height=1.0)
screen.screensize(800,1500)
begin = turtle.Turtle()
begin.speed(0)
begin.color("white")
begin.hideturtle()
screen.bgpic("p3.gif")
screen.bgcolor("#2a323d")
begin.up()
begin.goto(-170,80)
begin.down()
begin.write("DDA",align="center" , font=("Arial", 40, "bold"))
begin.up()
begin.goto(0,300)
begin.write("👀 Press Enter to start 👀", align="center" , font=("Arial", 40, "bold"))

def display_intro():
     intro = turtle.Turtle()
     intro.color("white")
     intro.up()
     intro.hideturtle()
     intro.goto(0 , 700)
     intro.down()
     intro.color("#85aad9")
     intro.write("✍️Digital Differential Analyzer Algorithm ✍️",align="center", font=("Comic Sans MS", 25, "bold"))
     intro.up()
     intro.goto(-680 , 650)
     intro.color("lightseagreen")
     intro.write("DDA Mathematical Proof:",align="left", font=("Comic Sans MS", 20, "bold"))
     intro.color("white")
     intro.goto(-680 , 600)
     intro.write("Consider the DDA Algorithm Derivation:",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 550)
     intro.write("1. Start with the equation of a line: y = mx + b",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 500)
     intro.write("2. Calculate the differences and incremental values:",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 450)
     intro.write("3. Derive successive values of x and y:",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 400)
     intro.write("   a. For incrementing Δx :      x(i+1) = x(i) + (Δy / Δx)",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 350)
     intro.write("   b. For incrementing Δy :      y(i+1) = y(i) + (Δx / Δy)",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 300)
     intro.write("4. Decide sampling intervals based on the slope (m)" ,font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680,250)
     intro.write("   a. If |m| ≤ 1:   Δx = 1   (x is sampled at unit intervals)       Δy = m",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 200)
     intro.write("   b. If |m| > 1:   Δx = 1/m (x is sampled at unit intervals)     Δy = 1",font=("Comic Sans MS", 17, "normal"))
     intro.goto(-680 , 150)
     intro.write("   c. For negative slopes:      Δx = -1      Δy = -m (or Δx = -1/m , Δy = -1 for Case b)",font=("Comic Sans MS", 17, "normal"))

def mathematical_proof_p1():
     screen.clear()
     screen.bgcolor("#2a323d")
     p = turtle.Turtle()
     # p.hideturtle()

     # --------------------------
     # divide Screen
     p.color("white")
     p.up()
     p.goto(-240 , 330)
     p.right(90)
     p.down()
     p.fd(1000)
     p.up()
     p.goto(260 , 330)
     p.down()
     p.fd(1000)
     # ----------------------------
     p.left(90)
     p.up()
     p.goto(0 , 350)
     p.write("👉 DDA Mathematical Proof 👈",align="center", font=("Comic Sans MS", 25, "bold"))
     # -----------------------
     # Case(1)
     p.goto(-750,300)
     p.color("cyan")
     p.write("👉 If |m| ≤ 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(-730 , 260)
     p.write("Case (1):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(-700 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(-670 , 230)
     p.down()
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(-680 , 230)
     p.down()
     p.right(45)
     p.fd(75)
     p.up()
     p.goto(-620 , 176)
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     # ------- 30 pixel
     p.goto(-590 , 230)
     p.write("y2 < y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-590 , 200)
     p.write("x2 > x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 100)
     p.write("Negative Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 50)
     p.write("x -> increase, y -> calculated",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 0)
     p.write("Δx = x(i+1) - x(i) , x(i+1) = x(i) + 1 ",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , -50)
     p.write("Δx = x(i) + 1 - x(i)",align="left", font=("Comic Sans MS", 16, "bold"))
     p.left(90)

     p.up()
     p.color("red")
     p.goto(-650 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(-530 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(-700 , -100)
     p.write("👉Δx = 1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(-700 , -150)
     p.write("Δy = m.Δx",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , -200)
     p.write("👉Δy = m",align="left", font=("Comic Sans MS", 16, "bold"))

     # -----------------------------------------------------------------------
     p.right(45)
     p.goto(-230,300)
     p.color("cyan")
     p.write("👉 If |m| ≤ 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(-230 , 260)
     p.write("Case (2):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(-200 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(-170 , 230)
     p.down()
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(-180 , 230)
     p.down()
     p.right(45)
     p.fd(75)
     p.up()
     p.goto(-120 , 176)
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     # ------- 30 pixel
     p.goto(-90 , 230)
     p.write("y2 < y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-90 , 200)
     p.write("x2 < x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 100)
     p.write("Positive Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 50)
     p.write("x -> decrease , y -> calculated",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 0)
     p.write("Δx = x(i+1) - x(i) , x(i+1) = x(i) - 1 ",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -50)
     p.write("Δx = x(i) - 1 - x(i)",align="left", font=("Comic Sans MS", 16, "bold"))
     p.left(90)

     p.up()
     p.color("red")
     p.goto(-150 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(-30 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(-200 , -100)
     p.write("👉 Δx = -1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(-200 , -150)
     p.write("Δy = m.Δx",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -200)
     p.write("Δy = m.-1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -250)
     p.write("👉 Δy = -m",align="left", font=("Comic Sans MS", 16, "bold"))
     # --------------------------------------------------------------------
     # case(2.1)
     p.right(45)
     p.goto(270,300)
     p.color("cyan")
     p.write("👉 If |m| > 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(270 , 260)
     p.write("Case (1):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(300 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(360 , 230)
     p.down()
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(320 , 176)
     p.down()
     p.left(45)
     p.fd(75)
     p.up()
     p.goto(340 , 170)
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     # ------- 30 pixel
     p.goto(410 , 230)
     p.write("y2 > y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(410 , 200)
     p.write("x2 > x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 100)
     p.write("Positive Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 50)
     p.write("x -> calculated , y -> increase",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 0)
     p.write("Δy = y(i+1) - y(i) , y(i+1) = y(i) + 1 ",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , -50)
     p.write("Δy = y(i) + 1 - y(i)",align="left", font=("Comic Sans MS", 16, "bold"))
     # p.right(90)

     p.up()
     p.color("red")
     p.goto(350 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(470 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(300 , -100)
     p.write("👉 Δy = 1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(300 , -150)
     p.write("Δx = Δy/m",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , -200)
     p.write("👉 Δx = 1/m",align="left", font=("Comic Sans MS", 16, "bold"))


def mathematical_proof_p2():
     screen.clear()
     screen.bgcolor("#2a323d")
     p = turtle.Turtle()
     # --------------------------
     # divide Screen
     p.color("white")
     p.up()
     p.goto(-240 , 330)
     p.right(90)
     p.down()
     p.fd(1000)
     p.up()
     p.goto(260 , 330)
     p.down()
     p.fd(1000)
     # ----------------------------
     p.left(90)
     p.up()
     p.goto(0 , 350)
     p.write("👉 DDA Mathematical Proof 👈",align="center", font=("Comic Sans MS", 25, "bold"))
     # -----------------------
     # Case(2)
     p.goto(-750,300)
     p.color("cyan")
     p.write("👉 If |m| > 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(-730 , 260)
     p.write("Case (2):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(-700 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(-640 , 230)
     p.down()
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(-680 , 175)
     p.down()
     p.left(45)
     p.fd(75)
     p.up()
     p.goto(-690 , 176)
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     p.goto(-590 , 230)
     p.write("y2 < y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-590 , 200)
     p.write("x2 < x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 100)
     p.write("Positive Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 50)
     p.write("x -> calculated , y -> decrease",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , 0)
     p.write("Δy = y(i+1) - y(i) , y(i+1) = y(i) - 1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , -50)
     p.write("Δy = y(i) - 1 - y(i)",align="left", font=("Comic Sans MS", 16, "bold"))

     p.up()
     p.color("red")
     p.goto(-650 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(-530 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(-700 , -100)
     p.write("👉 Δy = -1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(-700 , -150)
     p.write("Δx = Δy/m",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-700 , -200)
     p.write("👉 Δx = -1/m",align="left", font=("Comic Sans MS", 16, "bold"))
     # ----------------------------------------------------------------------------
     p.right(45)
     p.goto(-230,300)
     p.color("cyan")
     p.write("👉 If |m| > 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(-230 , 260)
     p.write("Case (3):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(-200 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(-170 , 230)
     p.down()
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(-180 , 230)
     p.down()
     p.right(45)
     p.fd(75)
     p.up()
     p.goto(-120 , 176)
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     # ------- 30 pixel
     p.goto(-90 , 230)
     p.write("y2 < y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-90 , 200)
     p.write("x2 > x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 100)
     p.write("Negative Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 50)
     p.write("x -> calculated , y -> decrease",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , 0)
     p.write("Δy = y(i+1) - y(i) , y(i+1) = y(i) - 1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -50)
     p.write("Δy = y(i) - 1 - y(i)",align="left", font=("Comic Sans MS", 16, "bold"))
     p.left(90)

     p.up()
     p.color("red")
     p.goto(-150 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(-30 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(-200 , -100)
     p.write("👉 Δy = -1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(-200 , -150)
     p.write("Δy = m.Δx",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -200)
     p.write("Δy = m.-1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(-200 , -250)
     p.write("👉 Δx = -1/m",align="left", font=("Comic Sans MS", 16, "bold"))
     # -------------------------------------------------------
     # case(4):
     p.right(45)
     p.goto(270,300)
     p.color("cyan")
     p.write("👉 If |m| > 1 :",align="left", font=("Comic Sans MS", 18, "bold"))
     p.color("white")
     p.goto(270 , 260)
     p.write("Case (4):",align="left", font=("Comic Sans MS", 18, "bold"))
     p.goto(300 , 240)
     p.width(7)
     p.down()
     p.right(90)
     p.fd(80)
     p.left(90)
     p.fd(80)
     p.up()
     p.goto(320 , 230)
     p.down()
     p.write("E",font=("Comic Sans MS", 10, "bold"))
     p.up()
     p.goto(320 , 230)
     p.down()
     p.right(45)
     p.fd(75)
     p.up()
     p.write("S",font=("Comic Sans MS", 10, "bold"))
     p.goto(410 , 230)
     p.write("y2 > y1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(410 , 200)
     p.write("x2 < x1",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 100)
     p.write("Negative Slope:",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 50)
     p.write("x -> calculated , y -> increase",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , 0)
     p.write("Δy = y(i+1) - y(i) , y(i+1) = y(i) + 1 ",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , -50)
     p.write("Δy = y(i) + 1 - y(i)",align="left", font=("Comic Sans MS", 16, "bold"))
     p.left(90)

     p.up()
     p.color("red")
     p.goto(350 , -50)
     p.down()
     p.width(3)
     p.fd(40)

     p.up()
     p.goto(470 , -50)
     p.down()
     p.fd(40)

     p.up()
     p.color("white")
     p.goto(300 , -100)
     p.write("👉 Δy = 1",align="left", font=("Comic Sans MS", 16, "bold"))

     p.goto(300 , -150)
     p.write("Δx = Δy/m",align="left", font=("Comic Sans MS", 16, "bold"))
     p.goto(300 , -200)
     p.write("👉 Δx = 1/m",align="left", font=("Comic Sans MS", 16, "bold"))


def display_explanation(explanation, dx, dy, steps, incrX, incrY):
     explanation.hideturtle()
     explanation.color("white")
     explanation.penup()
     explanation.goto(-680, 50)
     explanation.color("#3e71d9")
     explanation.write("DDA Line Drawing Algorithm Explanation:", align="left", font=("Comic Sans MS", 20, "bold"))

     explanation.color("white")
     explanation.goto(-680, 0)
     explanation.write("1. Calculate Differences:", align="left", font=("Comic Sans MS", 17, "normal"))
     explanation.goto(-670, -50)
     explanation.write(f"   dx = {dx}, dy = {dy}", align="left", font=("Comic Sans MS", 17, "normal"))

     explanation.goto(-680, -100)
     explanation.write("2. Calculate Incremental Values:", align="left", font=("Comic Sans MS", 17, "normal"))
     explanation.goto(-670, -150)
     explanation.write(f"   steps = {steps}", align="left", font=("Comic Sans MS", 17, "normal"))
     explanation.goto(-670, -200)
     explanation.write(f"   incrX = {incrX}, incrY = {incrY}", align="left", font=("Comic Sans MS", 17, "normal"))

     explanation.goto(-680, -250)
     explanation.write("3. Draw the Line:", align="left", font=("Comic Sans MS", 17, "normal"))


def more():
     explanation = turtle.Turtle()
     explanation.hideturtle()
     explanation.up()
     explanation.goto(-680, -350)
     explanation.color("lightskyblue")
     explanation.write("Explanation:", align="left", font=("Comic Sans MS", 20, "bold"))

     explanation.color("white")
     explanation.goto(-680, -400)
     explanation.write("-The DDA algorithm increments the x and y coordinates by small steps,calculated based on", align="left", font=("Comic Sans MS", 17, "normal"))
     explanation.goto(-680, -450)
     explanation.write("the differences between the endpoints.This ensures a smooth and continuous line 🌷", align="left", font=("Comic Sans MS", 17, "normal"))


def draw_line_DDA_with_explanation(x1, y1, x2, y2): 
     screen.clear()    
     screen.bgcolor("#2a323d")
     
     display_intro()
     # Create Turtle objects
     pen = turtle.Turtle()
     pen.speed(0)
     pen.penup()
     pen.goto(x1, y1)
     pen.pendown()

     explanation = turtle.Turtle()
     display_explanation(explanation, x2 - x1, y2 - y1, max(abs(x2 - x1), abs(y2 - y1)), (x2 - x1) / max(abs(x2 - x1), abs(y2 - y1)), (y2 - y1) / max(abs(x2 - x1), abs(y2 - y1)))

     # Create Turtle for the table
     table_pen = turtle.Turtle()
     table_pen.hideturtle()
     table_pen.up()
     table_pen.width(13)
     table_pen.color("#6f818f")
     table_pen.goto(430, 220)
     table_pen.down()
     table_pen.fd(200)
     table_pen.right(90)
     table_pen.fd(910)
     table_pen.right(90)
     table_pen.fd(200)
     table_pen.right(90)
     table_pen.fd(910)
     table_pen.speed(0)
     table_pen.hideturtle()
     table_pen.penup()
     table_pen.goto(460, 170)
     table_pen.write("____Table____", align="left", font=("Courier", 14, "bold"))

     # Draw the table
     table_pen.goto(500, 130)
     table_pen.write(" x    y ", align="left", font=("Courier", 12, "bold"))
     table_pen.width(7)
     table_pen.up()
     table_pen.right(90)
     table_pen.goto(480, 120)
     table_pen.color("#6f818f")
     table_pen.down()
     table_pen.fd(100)
     table_pen.back(47)
     table_pen.right(90)
     table_pen.fd(785)
     table_pen.up()

     table_pen.color("#6f818f")
     # DDA Algorithm
     dx = x2 - x1
     dy = y2 - y1
     steps = max(abs(dx), abs(dy))
     incrX = dx / steps
     incrY = dy / steps

     x = x1 + 0.5 * sign(dx)
     y = y1 + 0.5 * sign(dy)

     pen.penup()
     pen.goto(floor(x), floor(y))
     pen.pendown()

     pen.dot(5, "blue")

     table_pen.goto(500, 100 * 20)
     table_pen.write(f" {floor(x)}     {floor(y)}", align="left", font=("Courier", 10, "bold"))

     # Draw the line with explanation
     for step in range(steps):
          x += incrX
          y += incrY

          pen.penup()
          pen.goto(floor(x), floor(y))
          pen.pendown()

          # Draw the point
          pen.dot(5, "cyan")

          # Update the table
          table_pen.goto(500, 100 - step * 20)
          table_pen.write(f" {floor(x)}     {floor(y)}", align="left", font=("Arial", 10, "normal"))

          pen.goto(x, y)

     pen.hideturtle()
     pen.up()
     pen.color("cyan")
     pen.goto(x - 50 , y + 20)
     pen.down()
     pen.write("The Drawing Line 👍🏻",font=("Courier", 17, "bold"))

     more()

def on_enter():
     mathematical_proof_p1()
     sleep(4)
     mathematical_proof_p2()
     sleep(4)
     draw_line_DDA_with_explanation(0, 0, 20, 40)

# Example usage
turtle.listen()
turtle.onkey(on_enter , "Return")
turtle.done()
# screen.exitonclick()

